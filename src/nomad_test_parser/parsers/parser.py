from typing import (
    TYPE_CHECKING,
)

if TYPE_CHECKING:
    from nomad.datamodel.datamodel import (
        EntryArchive
    )
    from structlog.stdlib import (
        BoundLogger,
    )

from nomad.config import config
from nomad.datamodel.metainfo.workflow import Workflow
from nomad.parsing.parser import MatchingParser
import numpy as np
#importa ArchiveSection
from nomad.metainfo import Section, Quantity  # Added import
from nomad.datamodel.data import ArchiveSection # Added import, replaces commented out #importa ArchiveSection


configuration = config.get_plugin_entry_point(
    'nomad_test_parser.parsers:parser_entry_point'
)

class SimpleOutput(ArchiveSection):
    """
    A simple section to store basic output from this parser.
    """
    m_def = Section(label='Simple Parser Output') # Defines the section metadata

    message = Quantity(
        type=str,
        description='A simple message generated by the parser.'
    )
    example_value = Quantity(
        type=np.float64,
        description='An example numerical value processed by the parser.'
    )
    parsed_mainfile_path = Quantity(
        type=str,
        description='The path of the mainfile that was parsed.'
    )

class NewParser(MatchingParser):
    def parse(
        self,
        mainfile: str,
        archive: 'EntryArchive',
        logger: 'BoundLogger',
        child_archives: dict[str, 'EntryArchive'] = None,
    ) -> None:
        logger.info('NewParser.parse', parameter=configuration.parameter)
        print("PIPPO ==========================================")
        print("PIPPO ==========================================")
        print("PIPPO ==========================================")
        print("PIPPO ==========================================")

        # 1. Create an instance of your custom section
        my_simple_output_data = SimpleOutput()

        # 2. Populate the section with some data
        #    (In a real parser, this data would come from parsing the 'mainfile')
        my_simple_output_data.message = 'This is a test message from NewParser.'
        my_simple_output_data.example_value = 123.456
        my_simple_output_data.parsed_mainfile_path = mainfile

        # 3. Assign your custom section to archive.data
        #    archive.data is the typical place for the primary data extracted by the parser.
        archive.data = my_simple_output_data

